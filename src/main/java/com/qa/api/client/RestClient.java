package com.qa.api.client;

import com.qa.api.constants.AuthType;
import com.qa.api.exceptions.APIException;
import com.qa.api.manager.ConfigManager;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

import java.io.File;
import java.util.Base64;
import java.util.Map;

import static io.restassured.RestAssured.expect;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.equalTo;


/**
 * RestClient class provides methods to set up HTTP requests with different authentication types
 * and content types using RestAssured.
 */
public class RestClient {
    // The RequestSpecification object used to configure and send HTTP requests.
    RequestSpecification request;

    // Response specification for validating responses with a status code of 200.
    ResponseSpecification response_200 = expect().statusCode(200);

    // Response specification for validating responses with a status code of 201.
    ResponseSpecification response_201 = expect().statusCode(201);

    // Response specification for validating responses with a status code of 204.
    ResponseSpecification response_204 = expect().statusCode(204);

    // Response specification for validating responses with a status code of 400.
    ResponseSpecification response_400 = expect().statusCode(400);

    // Response specification for validating responses with status codes 200 or 201.
    ResponseSpecification response_200_or_201 = expect().statusCode(anyOf(equalTo(200), equalTo(201)));

    // Response specification for validating responses with status codes 200 or 404.
    ResponseSpecification response_200_or_404 = expect().statusCode(anyOf(equalTo(200), equalTo(404)));

    /**
     * Sets up a RequestSpecification with the given base URL, authentication type, and content type.
     * This method initializes the HTTP request and configures it based on the provided parameters.
     *
     * @param baseUrl     The base URL for the API endpoint.
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, BASIC_AUTH, API_KEY, NO_AUTH).
     * @param contentType The content type for the request (e.g., JSON, XML, etc.).
     * @return A configured RequestSpecification object ready to send HTTP requests.
     * @throws APIException If an unsupported authentication type is provided.
     */
    public RequestSpecification setupRequest(String baseUrl, AuthType authType, ContentType contentType) {
        // Initialize the request with the base URL and content type
        request =
                given().log().all()
                        .baseUri(baseUrl)
                        .contentType(contentType)
                        .accept(contentType);

        // Configure the request based on the authentication type
        switch (authType) {
            case BEARER_TOKEN:
                // Add a Bearer token to the Authorization header
                // The token is retrieved from the configuration manager.
                request.header("Authorization", "Bearer " + ConfigManager.get("bearerToken"));
                break;
            case BASIC_AUTH:
                // Add a Basic Auth token to the Authorization header
                // The token is generated by encoding the username and password using Base64.
                request.header("Authorization", "Basic " + generateBasicAuthToken());
                break;
            case API_KEY:
                // Add an API key to the x-api-key header
                // A placeholder API key is used here, which should be replaced with a valid key.
                request.header("x-api-key", "api key will provide");
                break;
            case NO_AUTH:
                // No authentication is required
                // Logs a message indicating that no authentication is needed for the request.
                System.out.println("Auth is not required...");
                break;
            default:
                // Handle unsupported authentication types
                // Logs an error message and throws an APIException for invalid authentication types.
                System.out.println("<<<<This Auth is not supported, please provide a valid AuthType>>>>");
                throw new APIException("<<<<This is Invalid AuthType>>>>");
        }

        // Return the configured request
        return request;
    }


    /**
     * Generates a Basic Authentication token by encoding the username and password.
     * The credentials are retrieved from the configuration manager and encoded using Base64.
     *
     * @return A Base64-encoded string representing the Basic Authentication token.
     */
    private String generateBasicAuthToken(){
        String credentials = ConfigManager.get("username") + ":" + ConfigManager.get("password");
        return Base64.getEncoder().encodeToString(credentials.getBytes());
    }


    /**
     * Applies query and path parameters to the given request.
     * This method is used to dynamically add query and path parameters to an HTTP request.
     *
     * @param request     The RequestSpecification object to which the parameters will be applied.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParams  A map of path parameters to be included in the request URL (can be null).
     */
    public void applyParams(RequestSpecification request, Map<String, String> queryParams, Map<String, String> pathParams) {
        if (queryParams != null) {
            request.queryParams(queryParams);
        }

        if (pathParams != null) {
            request.pathParams(pathParams);
        }
    }


    /**
     * Sends a GET request to the specified endpoint.
     * This method is used to call the GET APIs with optional query and path parameters.
     *
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the GET request is sent.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParam   A map of path parameters to be included in the request URL (can be null).
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, etc.).
     * @param contentType The content type of the request (e.g., JSON, XML, etc.).
     * @return The response received from the GET request.
     */
    public Response get(String baseUrl, String endPoint,
                        Map<String, String> queryParams,
                        Map<String, String> pathParam,
                        AuthType authType,
                        ContentType contentType) {
        // Set up the request with the base URL, authentication type, and content type
        request = setupRequest(baseUrl, authType, contentType);

        // Apply query and path parameters to the request, if provided
        applyParams(request, queryParams, pathParam);

        // Send the GET request and extract the response
        Response response = request.get(endPoint).then().spec(response_200_or_404).extract().response();

        // Print the response body for debugging purposes
        response.prettyPrint();

        // Return the response object
        return response;
    }


    /**
     * Sends a POST request to the specified endpoint with a generic body.
     * This method is used when the request body is provided as a generic object (T).
     *
     * @param <T>         The type of the request body.
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the POST request is sent.
     * @param body        The request body to be sent in the POST request.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParam   A map of path parameters to be included in the request URL (can be null).
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, etc.).
     * @param contentType The content type of the request (e.g., JSON, XML, etc.).
     * @return The response received from the POST request.
     */
    public <T> Response post(String baseUrl, String endPoint, T body,
                             Map<String, String> queryParams,
                             Map<String, String> pathParam,
                             AuthType authType,
                             ContentType contentType) {
        // Set up the request with the base URL, authentication type, and content type
        request = setupRequest(baseUrl, authType, contentType);

        // Apply query and path parameters to the request, if provided
        applyParams(request, queryParams, pathParam);

        // Send the POST request with the body and extract the response
        Response response = request.body(body).post(endPoint).then().spec(response_200_or_201).extract().response();

        // Print the response body for debugging purposes
        response.prettyPrint();

        // Return the response object
        return response;
    }

    /**
     * Sends a POST request to the specified endpoint using client credentials.
     * This method is typically used for OAuth2 authentication flows where client ID and secret are required.
     *
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the POST request is sent.
     * @param clientID    The client ID used for authentication.
     * @param clientSecret The client secret used for authentication.
     * @param grantType   The type of grant being requested (e.g., "client_credentials").
     * @param contentType The content type of the request (e.g., application/x-www-form-urlencoded).
     * @param <T>         The type of the response body (generic placeholder for flexibility).
     * @return The response received from the POST request.
     */
    public <T> Response post(String baseUrl, String endPoint, String clientID, String clientSecret, String grantType,
                             ContentType contentType) {
        // Configures and sends the POST request with form parameters
        Response response = given().log().all()
                .contentType(contentType) // Sets content type to URL-encoded form
                .formParam("grant_type", grantType) // Specifies the grant type
                .formParam("client_id", clientID) // Client ID
                .formParam("client_secret", clientSecret) // Client secret
                .when()
                .post(baseUrl + endPoint); // Sends the POST request to the specified endpoint

        // Prints the response body for debugging purposes
        response.prettyPrint();

        // Returns the response object
        return response;
    }


    /**
     * Sends a POST request to the specified endpoint using a file as the request body.
     * This method is used when the request body is provided as a file, as generic types (T) do not support files.
     *
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the POST request is sent.
     * @param file        The file to be used as the request body.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParam   A map of path parameters to be included in the request URL (can be null).
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, etc.).
     * @param contentType The content type of the request (e.g., JSON, XML, etc.).
     * @return The response received from the POST request.
     */
    public Response post(String baseUrl, String endPoint, File file,
                         Map<String, String> queryParams,
                         Map<String, String> pathParam,
                         AuthType authType,
                         ContentType contentType) {
        // Set up the request with the base URL, authentication type, and content type
        request = setupRequest(baseUrl, authType, contentType);

        // Apply query and path parameters to the request, if provided
        applyParams(request, queryParams, pathParam);

        // Send the POST request with the file as the body and extract the response
        Response response = request.body(file).post(endPoint).then().spec(response_200_or_201).extract().response();

        // Print the response body for debugging purposes
        response.prettyPrint();

        // Return the response object
        return response;
    }


    /**
     * Sends a PUT request to the specified endpoint with a generic body.
     * This method is used to update resources on the server using the PUT HTTP method.
     *
     * @param <T>         The type of the request body.
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the PUT request is sent.
     * @param body        The request body to be sent in the PUT request.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParam   A map of path parameters to be included in the request URL (can be null).
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, etc.).
     * @param contentType The content type of the request (e.g., JSON, XML, etc.).
     * @return The response received from the PUT request.
     */
    public <T> Response put(String baseUrl, String endPoint, T body,
                            Map<String, String> queryParams,
                            Map<String, String> pathParam,
                            AuthType authType,
                            ContentType contentType) {
        // Set up the request with the base URL, authentication type, and content type
        request = setupRequest(baseUrl, authType, contentType);

        // Apply query and path parameters to the request, if provided
        applyParams(request, queryParams, pathParam);

        // Send the PUT request with the body and extract the response
        Response response = request.body(body).put(endPoint).then().spec(response_200).extract().response();

        // Print the response body for debugging purposes
        response.prettyPrint();

        // Return the response object
        return response;
    }


    /**
     * Sends a PATCH request to the specified endpoint with a generic body.
     * This method is used to partially update resources on the server using the PATCH HTTP method.
     *
     * @param <T>         The type of the request body.
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the PATCH request is sent.
     * @param body        The request body to be sent in the PATCH request.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParam   A map of path parameters to be included in the request URL (can be null).
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, etc.).
     * @param contentType The content type of the request (e.g., JSON, XML, etc.).
     * @return The response received from the PATCH request.
     */
    public <T> Response patch(String baseUrl, String endPoint, T body,
                              Map<String, String> queryParams,
                              Map<String, String> pathParam,
                              AuthType authType,
                              ContentType contentType) {
        // Set up the request with the base URL, authentication type, and content type
        request = setupRequest(baseUrl, authType, contentType);

        // Apply query and path parameters to the request, if provided
        applyParams(request, queryParams, pathParam);

        // Send the PATCH request with the body and extract the response
        Response response = request.body(body).patch(endPoint).then().spec(response_200).extract().response();

        // Print the response body for debugging purposes
        response.prettyPrint();

        // Return the response object
        return response;
    }


    /**
     * Sends a DELETE request to the specified endpoint.
     * This method is used to delete resources on the server using the DELETE HTTP method.
     *
     * @param <T>         The type of the request body (not used in this method but kept for consistency).
     * @param baseUrl     The base URL for the API endpoint.
     * @param endPoint    The specific endpoint to which the DELETE request is sent.
     * @param queryParams A map of query parameters to be included in the request URL (can be null).
     * @param pathParam   A map of path parameters to be included in the request URL (can be null).
     * @param authType    The type of authentication to use (e.g., BEARER_TOKEN, OAUTH2, etc.).
     * @param contentType The content type of the request (e.g., JSON, XML, etc.).
     * @return The response received from the DELETE request.
     */
    public <T> Response delete(String baseUrl, String endPoint,
                               Map<String, String> queryParams,
                               Map<String, String> pathParam,
                               AuthType authType,
                               ContentType contentType) {
        // Set up the request with the base URL, authentication type, and content type
        request = setupRequest(baseUrl, authType, contentType);

        // Apply query and path parameters to the request, if provided
        applyParams(request, queryParams, pathParam);

        // Send the DELETE request and extract the response
        Response response = request.delete(endPoint).then().spec(response_204).extract().response();

        // Print the response body for debugging purposes
        response.prettyPrint();

        // Return the response object
        return response;
    }

}